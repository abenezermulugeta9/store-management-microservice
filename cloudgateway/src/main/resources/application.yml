# Server configuration
server:
  port: 9090

spring:
  # Application configuration
  application:
    name: API-GATEWAY
  config:
    import: configserver:http://localhost:9296 # Client discovery configuration coming from config server in github
  cloud:
    gateway: # Api gateway configuration
      routes:
        # Register a load-balanced order service in the api gateway
        - id : ORDER-SERVICE
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/orders/**
          # Configure circuit breaker for order service
          filters:
            - name : CircuitBreaker
              args:
                name: ORDER-SERVICE
                fallbackuri: forward:/order-service-fallback # If the order service is down, the circuit breaker will forward the request to this api
            - name: RequestRateLimiter # Configure rate limiter for order service
              args:
                redis-rate-limiter.replenishRate: 1 # Represents the number of requests per unit of time.
                # In this case, the rate limiter will allow one request per one second.
                redis-rate-limiter.burstCapacity: 1 # Represents the maximum number of requests that can be temporarily allowed to exceed
                # the replenish rate before the rate limiter starts blocking requests. In this case, it's set to 1, which means that if there is a burst
                # of requests, only one request can exceed the replenish rate before the rate limiter starts throttling additional requests.
        # Register a load-balanced product service in the api gateway
        - id: PRODUCT-SERVICE
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/products/**
          # Configure circuit breaker for product service
          filters:
            - name: CircuitBreaker
              args:
                name: PRODUCT-SERVICE
                fallbackuri: forward:/product-service-fallback # If the product service is down, the circuit breaker will forward the request to this api
            - name: RequestRateLimiter # Configure rate limiter for product service
              args:
                redis-rate-limiter.replenishRate: 1 # Represents the number of requests per unit of time.
                # In this case, the rate limiter will allow one request per one second.
                redis-rate-limiter.burstCapacity: 1 # Represents the maximum number of requests that can be temporarily allowed to exceed
                # the replenish rate before the rate limiter starts blocking requests. In this case, it's set to 1, which means that if there is a burst
                # of requests, only one request can exceed the replenish rate before the rate limiter starts throttling additional requests.
        # Register a load-balanced payment service in the api gateway
        - id: PAYMENT-SERVICE
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/payments/**
          # Configure circuit breaker for payment service
          filters:
            - name: CircuitBreaker
              args:
                name: PAYMENT-SERVICE
                fallbackuri: forward:/payment-service-fallback # If the payment service is down, the circuit breaker will forward the request to this api
            - name: RequestRateLimiter # Configure rate limiter for payment service
              args:
                redis-rate-limiter.replenishRate: 1 # Represents the number of requests per unit of time.
                # In this case, the rate limiter will allow one request per one second.
                redis-rate-limiter.burstCapacity: 1 # Represents the maximum number of requests that can be temporarily allowed to exceed
                # the replenish rate before the rate limiter starts blocking requests. In this case, it's set to 1, which means that if there is a burst
                # of requests, only one request can exceed the replenish rate before the rate limiter starts throttling additional requests.